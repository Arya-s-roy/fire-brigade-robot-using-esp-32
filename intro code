e// --- Pin Setup ---
#define FLAME_SENSOR_PIN 34
#define DHT_PIN 4
#define DHTTYPE DHT22
#define MOTOR_LEFT_F 27
#define MOTOR_LEFT_B 26
#define MOTOR_RIGHT_F 25
#define MOTOR_RIGHT_B 33
#define PUMP_PIN 32

// GPS & GSM pins
#define GPS_RX 16  // GPS TX â†’ ESP32 RX
#define GPS_TX 17  // GPS RX â†’ ESP32 TX
#define GSM_RX 26  // SIM TX â†’ ESP32 RX
#define GSM_TX 27  // SIM RX â†’ ESP32 TX

DHT dht(DHT_PIN, DHTTYPE);
TinyGPSPlus gps;
HardwareSerial SerialGPS(1);
HardwareSerial SerialGSM(2);

// --- TensorFlow Lite Micro ---
tflite::MicroErrorReporter micro_error_reporter;
tflite::ErrorReporter* error_reporter = &micro_error_reporter;
const tflite::Model* model = tflite::GetModel(fire_model);
tflite::MicroInterpreter* interpreter;
tflite::MicroOpResolver<5> resolver;
constexpr int tensor_arena_size = 2 * 1024;
uint8_t tensor_arena[tensor_arena_size];

// --- Motor Functions ---
void moveForward() {
  digitalWrite(MOTOR_LEFT_F, HIGH);
  digitalWrite(MOTOR_LEFT_B, LOW);
  digitalWrite(MOTOR_RIGHT_F, HIGH);
  digitalWrite(MOTOR_RIGHT_B, LOW);
}
void stopMotors() {
  digitalWrite(MOTOR_LEFT_F, LOW);
  digitalWrite(MOTOR_LEFT_B, LOW);
  digitalWrite(MOTOR_RIGHT_F, LOW);
  digitalWrite(MOTOR_RIGHT_B, LOW);
}
// --- Send SMS ---
void sendSMS(float lat, float lon) {
  String locationLink = "https://maps.google.com/?q=" + String(lat, 6) + "," + String(lon, 6);

  SerialGSM.println("AT+CMGF=1");  // SMS mode
  delay(500);
  SerialGSM.println("AT+CMGS=\"+911234567890\""); // Replace with your phone number
  delay(500);
  SerialGSM.print("ðŸ”¥ Fire detected at location: ");
  SerialGSM.println(locationLink);
  SerialGSM.write(26); // Ctrl+Z to send
  delay(1000);
}
// --- Setup ---
void setup() {
  Serial.begin(115200);
  dht.begin();

  pinMode(FLAME_SENSOR_PIN, INPUT);
  pinMode(MOTOR_LEFT_F, OUTPUT);
  pinMode(MOTOR_LEFT_B, OUTPUT);
  pinMode(MOTOR_RIGHT_F, OUTPUT);
  pinMode(MOTOR_RIGHT_B, OUTPUT);
  pinMode(PUMP_PIN, OUTPUT);

  // GPS & GSM init
  SerialGPS.begin(9600, SERIAL_8N1, GPS_RX, GPS_TX);
  SerialGSM.begin(9600, SERIAL_8N1, GSM_RX, GSM_TX);

  // TensorFlow Lite setup
  resolver.AddFullyConnected();
  resolver.AddRelu();
  resolver.AddSoftmax();
  static tflite::MicroInterpreter static_interpreter(
      model, resolver, tensor_arena, tensor_arena_size, error_reporter);
  interpreter = &static_interpreter;
  interpreter->AllocateTensors();
}

// --- Loop ---
void loop() {
  float temperature = dht.readTemperature();
  int flameValue = analogRead(FLAME_SENSOR_PIN) > 500 ? 1 : 0;







